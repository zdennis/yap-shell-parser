#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Yap
  module Line
    class MyParser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 65)
  $LOAD_PATH.unshift File.dirname(__FILE__) + "/../../"
  require 'yap/line/lexer'
  require 'yap/line/nodes'

  include Yap::Line::Nodes

  def parse(str)
    @q = Yap::Line::Lexer.new.tokenize(str)
    # @q.push [false, '$']   # is optional from Racc 1.3.7
puts @q.inspect
puts "---- parse tree follows ----"
    __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
    #do_parse
  end

  def next_token
    @q.shift
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    10,    11,    10,    11,    12,    14,    12,    22,     6,    26,
     6,    10,    11,    10,    11,    12,    20,    12,    20,     6,
    18,     6,    10,    11,    16,    15,    12,    14,    13,    27,
     6,    27,    15,    16 ]

racc_action_check = [
     0,     0,     6,     6,     0,    17,     6,    13,     0,    17,
     6,    16,    16,    14,    14,    16,    10,    14,    11,    16,
     9,    14,    15,    15,     4,     3,    15,     2,     1,    19,
    15,    21,    23,    24 ]

racc_action_pointer = [
    -2,    28,    20,    17,    15,   nil,     0,   nil,   nil,    15,
    12,    14,   nil,     7,    11,    20,     9,    -2,   nil,    25,
   nil,    27,   nil,    24,    24,   nil,   nil,   nil ]

racc_action_default = [
   -20,   -20,    -1,    -3,    -5,    -7,   -20,    -9,   -10,   -12,
   -13,   -15,   -19,   -20,   -20,   -20,   -20,   -20,   -11,   -14,
   -17,   -16,    28,    -2,    -4,    -6,    -8,   -18 ]

racc_goto_table = [
     2,    19,    21,    24,    23,    25,    17,     1 ]

racc_goto_check = [
     2,     9,     9,     4,     3,     5,     2,     1 ]

racc_goto_pointer = [
   nil,     7,     0,   -10,   -12,   -11,   nil,   nil,   nil,    -9 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     7,     8,     9,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 13, :_reduce_none,
  3, 14, :_reduce_2,
  1, 14, :_reduce_3,
  3, 15, :_reduce_4,
  1, 15, :_reduce_none,
  3, 16, :_reduce_6,
  1, 16, :_reduce_none,
  3, 17, :_reduce_8,
  1, 17, :_reduce_none,
  1, 17, :_reduce_none,
  2, 18, :_reduce_11,
  1, 18, :_reduce_none,
  1, 20, :_reduce_13,
  2, 20, :_reduce_14,
  1, 20, :_reduce_15,
  2, 20, :_reduce_16,
  1, 21, :_reduce_17,
  2, 21, :_reduce_18,
  1, 19, :_reduce_19 ]

racc_reduce_n = 20

racc_shift_n = 28

racc_token_table = {
  false => 0,
  :error => 1,
  :Command => 2,
  :LiteralCommand => 3,
  :Argument => 4,
  :Heredoc => 5,
  :InternalEval => 6,
  :Separator => 7,
  :Conditional => 8,
  :Pipe => 9,
  "(" => 10,
  ")" => 11 }

racc_nt_base = 12

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "Command",
  "LiteralCommand",
  "Argument",
  "Heredoc",
  "InternalEval",
  "Separator",
  "Conditional",
  "Pipe",
  "\"(\"",
  "\")\"",
  "$start",
  "program",
  "stmts",
  "expr",
  "pipeline",
  "stmts2",
  "command",
  "internal_eval",
  "command2",
  "args" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'grammar.y', 23)
  def _reduce_2(val, _values, result)
     result = Statements.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 25)
  def _reduce_3(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 28)
  def _reduce_4(val, _values, result)
     result = Conditional.new(val[1].value, val[0], val[2]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_6(val, _values, result)
     result = val[1], val[0], val[2] 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'grammar.y', 36)
  def _reduce_8(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

module_eval(<<'.,.,', 'grammar.y', 41)
  def _reduce_11(val, _values, result)
     val[0].heredoc = val[1] ; result = val[0] 
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_13(val, _values, result)
     result = Command.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_14(val, _values, result)
     result = Command.new(val[0].value, val[1].flatten) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_15(val, _values, result)
     result = Command.new(val[0].value, literal:true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 51)
  def _reduce_16(val, _values, result)
     result = Command.new(val[0].value, val[1].flatten, literal:true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_17(val, _values, result)
     result = [val[0].value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_18(val, _values, result)
     result = [val[0], val[1].value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_19(val, _values, result)
     result = val 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class MyParser
    end   # module Line
  end   # module Yap


if $0 == __FILE__

class Evaluator

  def evaltree(tree)
    result = 0
    leftnode = tree[0]
    if leftnode.is_a?(Array)
      result = evaltree(leftnode)
    elsif leftnode
      puts leftnode.inspect
      puts tree[1..-1].inspect
      puts "--"
      result = evalnode leftnode, tree[1..-1]
    end

    rightnode = tree[1]
    if rightnode.is_a?(Array)
      result = evaltree(rightnode)
    elsif rightnode
      puts rightnode.inspect
      puts tree[1..-1].inspect
      puts "--"
      result = evalnode rightnode, tree[1..-1]
    end
    result
  end

  def evalnode(node, parts)
    result = nil
    puts "NODE: #{node.inspect}"
    puts "PARTS: #{parts.inspect}"
    case node.tag
    when :InternalEval
      result = eval node.value
      puts "Eval'd: #{result}"
    when :Separator
      puts "no-op"
    when :Conditional
      result = evaltree(parts[0])
      if result > 0
        result = evaltree(parts[1])
      end
      puts "CEval'd: #{result}"
    else
      raise "Don't know how to evalnode: #{node.inspect}"
    end
    result
  end
end


  $LOAD_PATH.unshift File.dirname(__FILE__) + "/../../"
  require 'yap/line/lexer'
  require 'yap/line/nodes'
  src = "echo foo"
  src = "echo foo ; echo bar baz yep"
  src = "echo foo && echo bar baz yep"
  src = "echo foo && echo bar && ls foo && ls bar"
  src = "echo foo ; echo bar baz yep ; ls foo"
  src = "echo foo && echo bar ; ls baz"
  src = "echo foo && echo bar ; ls baz ; echo zach || echo gretchen"
  src = "echo foo | bar"
  src = "echo foo | bar && foo | bar"
  src = "foo && bar ; word || baz ; yep | grep -v foo"
  src = "( foo )"
  src = "( foo a b && bar c d )"
  src = "( foo a b && (bar c d | baz e f))"
  src = "((((foo))))"
  src = "foo -b -c ; (this ;that ;the; other  ;thing) && yep"
  src = "foo -b -c ; (this ;that && other  ;thing) && yep"
  src = "4 + 5"
  src = "!'hello' ; 4 - 4 && 10 + 3"
  src = "\\foo <<-EOT\nbar\nEOT"
  puts 'parsing:'
  print src
  puts
  puts 'result:'
  require 'pp'
  ast = Yap::Line::MyParser.new.parse(src)
  pp ast

  puts "---- Evaluating"
    require 'pry'
  binding.pry
  # Evaluator.new.evaltree(ast)
end
