#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Yap
  module Line
    class MyParser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 73)
  $LOAD_PATH.unshift File.dirname(__FILE__) + "/../../"
  require 'yap/line/lexer'
  require 'yap/line/nodes'

  include Yap::Line::Nodes

  def parse(str)
    @q = Yap::Line::Lexer.new.tokenize(str)
    # @q.push [false, '$']   # is optional from Racc 1.3.7
# puts @q.inspect
# puts "---- parse tree follows ----"
    __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
    #do_parse
  end

  def next_token
    @q.shift
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    11,    12,    11,    12,    13,    15,    13,    23,    20,     6,
    29,     6,    11,    12,    11,    12,    13,    21,    13,    23,
    19,     6,    25,     6,    11,    12,    17,    16,    13,    15,
    14,    30,    30,     6,    16,    17 ]

racc_action_check = [
     0,     0,     6,     6,     0,    18,     6,    12,     9,     0,
    18,     6,    17,    17,    15,    15,    17,    10,    15,    11,
     7,    17,    14,    15,    16,    16,     4,     3,    16,     2,
     1,    22,    24,    16,    26,    27 ]

racc_action_pointer = [
    -2,    30,    22,    19,    17,   nil,     0,    10,   nil,    -2,
    12,    15,     3,   nil,    22,    12,    22,    10,    -2,   nil,
   nil,   nil,    27,   nil,    28,   nil,    26,    26,   nil,   nil,
   nil ]

racc_action_default = [
   -25,   -25,    -1,    -3,    -5,    -7,   -25,    -9,   -10,   -15,
   -17,   -18,   -20,   -24,   -25,   -25,   -25,   -25,   -25,   -13,
   -14,   -16,   -19,   -22,   -21,    31,    -2,    -4,    -6,    -8,
   -23 ]

racc_goto_table = [
     2,    22,    24,    27,    26,    28,    18,     1 ]

racc_goto_check = [
     2,    11,    11,     4,     3,     5,     2,     1 ]

racc_goto_pointer = [
   nil,     7,     0,   -11,   -13,   -12,   nil,   nil,   nil,   nil,
   nil,   -10 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     7,     8,   nil,     9,
    10,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 14, :_reduce_none,
  3, 15, :_reduce_2,
  1, 15, :_reduce_3,
  3, 16, :_reduce_4,
  1, 16, :_reduce_none,
  3, 17, :_reduce_6,
  1, 17, :_reduce_none,
  3, 18, :_reduce_8,
  1, 18, :_reduce_none,
  1, 18, :_reduce_none,
  2, 21, :_reduce_none,
  1, 21, :_reduce_none,
  2, 19, :_reduce_13,
  2, 19, :_reduce_14,
  1, 19, :_reduce_none,
  2, 22, :_reduce_16,
  1, 22, :_reduce_none,
  1, 23, :_reduce_18,
  2, 23, :_reduce_19,
  1, 23, :_reduce_20,
  2, 23, :_reduce_21,
  1, 24, :_reduce_22,
  2, 24, :_reduce_23,
  1, 20, :_reduce_24 ]

racc_reduce_n = 25

racc_shift_n = 31

racc_token_table = {
  false => 0,
  :error => 1,
  :Command => 2,
  :LiteralCommand => 3,
  :Argument => 4,
  :Heredoc => 5,
  :InternalEval => 6,
  :Separator => 7,
  :Conditional => 8,
  :Pipe => 9,
  :Redirection => 10,
  "(" => 11,
  ")" => 12 }

racc_nt_base = 13

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "Command",
  "LiteralCommand",
  "Argument",
  "Heredoc",
  "InternalEval",
  "Separator",
  "Conditional",
  "Pipe",
  "Redirection",
  "\"(\"",
  "\")\"",
  "$start",
  "program",
  "stmts",
  "stmt",
  "pipeline",
  "stmts2",
  "command_w_redirects",
  "internal_eval",
  "command_w_heredoc",
  "command",
  "command2",
  "args" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'grammar.y', 23)
  def _reduce_2(val, _values, result)
     result = StatementsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 25)
  def _reduce_3(val, _values, result)
     result = StatementsNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 28)
  def _reduce_4(val, _values, result)
     result = ConditionalNode.new(val[1].value, val[0], val[2]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_6(val, _values, result)
     result = PipelineNode.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'grammar.y', 36)
  def _reduce_8(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'grammar.y', 44)
  def _reduce_13(val, _values, result)
     val[0].redirects << RedirectionNode.new(val[1].value, val[1].attrs[:target]) ; result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_14(val, _values, result)
     val[0].redirects << RedirectionNode.new(val[1].value, val[1].attrs[:target]) ; result = val[0] 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_16(val, _values, result)
     val[0].heredoc = val[1].value ; result = val[0] 
    result
  end
.,.,

# reduce 17 omitted

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_18(val, _values, result)
     result = CommandNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_19(val, _values, result)
     result = CommandNode.new(val[0].value, val[1].flatten) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_20(val, _values, result)
     result = CommandNode.new(val[0].value, literal:true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_21(val, _values, result)
     result = CommandNode.new(val[0].value, val[1].flatten, literal:true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_22(val, _values, result)
     result = [val[0].value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_23(val, _values, result)
     result = [val[0], val[1].value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_24(val, _values, result)
     result = InternalEvalNode.new(val[0].value) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class MyParser
    end   # module Line
  end   # module Yap


if $0 == __FILE__

  $LOAD_PATH.unshift File.dirname(__FILE__) + "/../../"
  require 'yap/line/lexer'
  require 'yap/line/nodes'
  src = "echo foo"
  src = "echo foo ; echo bar baz yep"
  src = "echo foo && echo bar baz yep"
  src = "echo foo && echo bar && ls foo && ls bar"
  src = "echo foo ; echo bar baz yep ; ls foo"
  src = "echo foo && echo bar ; ls baz"
  src = "echo foo && echo bar ; ls baz ; echo zach || echo gretchen"
  src = "echo foo | bar"
  src = "echo foo | bar && foo | bar"
  src = "foo && bar ; word || baz ; yep | grep -v foo"
  src = "( foo )"
  src = "( foo a b && bar c d )"
  src = "( foo a b && (bar c d | baz e f))"
  src = "((((foo))))"
  src = "foo -b -c ; (this ;that ;the; other  ;thing) && yep"
  src = "foo -b -c ; (this ;that && other  ;thing) && yep"
  src = "4 + 5"
  src = "!'hello' ; 4 - 4 && 10 + 3"
  src = "\\foo <<-EOT\nbar\nEOT"
  src = "ls | grep md | grep WISH"
  src = "(!upcase)"
  src = "echo foo > bar.txt"
  src = "ls -l > a.txt ; echo f 2> b.txt ; cat b &> c.txt ; du -sh 1>&2 1>hey.txt"
  src = "!Dir.chdir('..')"
  puts 'parsing:'
  print src
  puts
  puts 'result:'
  require 'pp'
  ast = Yap::Line::MyParser.new.parse(src)
  pp ast

  # puts "---- Evaluating"
  #   require 'pry'
  # binding.pry
  # Evaluator.new.evaltree(ast)
end
