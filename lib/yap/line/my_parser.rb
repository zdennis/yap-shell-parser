#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Yap
  module Line
    class MyParser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 60)

  def parse(str)
    @q = Yap::Line::Lexer.new.tokenize(str)
    # @q.push [false, '$']   # is optional from Racc 1.3.7
puts @q.inspect
puts "---- parse tree follows ----"
    __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
    #do_parse
  end

  def next_token
    @q.shift
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    10,    10,    10,    10,    11,    11,    11,    11,     7,     7,
     7,     7,    10,    13,    19,    18,    11,    23,    15,    14,
     7,    13,    12,    24,    14,    15 ]

racc_action_check = [
     0,     7,    15,    13,     0,     7,    15,    13,     0,     7,
    15,    13,    14,    16,    12,    10,    14,    16,     5,     4,
    14,     3,     1,    17,    20,    21 ]

racc_action_pointer = [
    -2,    22,   nil,    14,    11,     9,   nil,    -1,   nil,   nil,
    11,   nil,    14,     1,    10,     0,     6,    19,   nil,   nil,
    16,    16,   nil,   nil,   nil ]

racc_action_default = [
   -17,   -17,    -1,    -2,    -4,    -6,    -8,   -17,   -10,   -11,
   -12,   -16,   -17,   -17,   -17,   -17,   -17,   -13,   -14,    25,
    -3,    -5,    -7,    -9,   -15 ]

racc_goto_table = [
     3,    20,     1,     2,    21,    22,    17,    16 ]

racc_goto_check = [
     3,     4,     1,     2,     5,     6,     9,     3 ]

racc_goto_pointer = [
   nil,     2,     3,     0,   -12,   -10,   -10,   nil,   nil,    -4 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     4,     5,     6,     8,     9,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 13, :_reduce_none,
  1, 14, :_reduce_none,
  3, 15, :_reduce_3,
  1, 15, :_reduce_4,
  3, 16, :_reduce_5,
  1, 16, :_reduce_none,
  3, 17, :_reduce_7,
  1, 17, :_reduce_none,
  3, 18, :_reduce_9,
  1, 18, :_reduce_none,
  1, 18, :_reduce_none,
  1, 19, :_reduce_12,
  2, 19, :_reduce_13,
  1, 21, :_reduce_14,
  2, 21, :_reduce_15,
  1, 20, :_reduce_16 ]

racc_reduce_n = 17

racc_shift_n = 25

racc_token_table = {
  false => 0,
  :error => 1,
  :Command => 2,
  :LiteralCommand => 3,
  :Argument => 4,
  :Heredoc => 5,
  :InternalEval => 6,
  :Separator => 7,
  :Conditional => 8,
  :Pipe => 9,
  "(" => 10,
  ")" => 11 }

racc_nt_base = 12

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "Command",
  "LiteralCommand",
  "Argument",
  "Heredoc",
  "InternalEval",
  "Separator",
  "Conditional",
  "Pipe",
  "\"(\"",
  "\")\"",
  "$start",
  "program",
  "stmt",
  "expr",
  "mulex",
  "pipeline",
  "stmts2",
  "command",
  "internal_eval",
  "args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.y', 26)
  def _reduce_3(val, _values, result)
     result = [*val[0], val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 28)
  def _reduce_4(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 31)
  def _reduce_5(val, _values, result)
     result = val[1], val[0], val[2] 
    result
  end
.,.,

# reduce 6 omitted

module_eval(<<'.,.,', 'grammar.y', 35)
  def _reduce_7(val, _values, result)
     result = val[1], val[0], val[2] 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_9(val, _values, result)
     result = val[0], *val[1], val[2] 
    result
  end
.,.,

# reduce 10 omitted

# reduce 11 omitted

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_12(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_13(val, _values, result)
     result = [val[0], val[1]].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_14(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_15(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_16(val, _values, result)
     result = val 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class MyParser
    end   # module Line
  end   # module Yap


if $0 == __FILE__
  $LOAD_PATH.unshift File.dirname(__FILE__) + "/../../"
  require 'yap/line/lexer'
  src = "echo foo"
  src = "echo foo ; echo bar baz yep"
  src = "echo foo && echo bar baz yep"
  src = "echo foo && echo bar && ls foo && ls bar"
  src = "echo foo ; echo bar baz yep ; ls foo"
  src = "echo foo && echo bar ; ls baz"
  src = "echo foo && echo bar ; ls baz ; echo zach || echo gretchen"
  src = "echo foo | bar"
  src = "echo foo | bar && foo | bar"
  src = "foo && bar ; word || baz ; yep | grep -v foo"
  src = "( foo )"
  src = "( foo a b && bar c d )"
  src = "( foo a b && (bar c d | baz e f))"
  src = "((((foo))))"
  src = "foo -b -c ; (this ;that ;the; other  ;thing) && yep"
  src = "foo -b -c ; (this ;that && other  ;thing) && yep"
  src = "4 + 5"
  src = "!ruby code here ; echo && 4 + 5"
  puts 'parsing:'
  print src
  puts
  puts 'result:'
  require 'pp'
  pp Yap::Line::MyParser.new.parse(src)
end
