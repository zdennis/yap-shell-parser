#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

if $0 ==__FILE__
  $LOAD_PATH.unshift File.dirname(__FILE__) + "/../../"
  module Yap
    module Shell
      module Parser
      end
    end
  end
  require 'yap/shell/parser/nodes'
end

module Yap
  module Shell
    class ParserImpl < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 107)
  include Yap::Shell::Parser::Nodes

#=end
  def parse(str)
    @yydebug = true

    @q = Yap::Shell::Parser::Lexer.new.tokenize(str)
    # @q.push [false, '$']   # is optional from Racc 1.3.7
# puts @q.inspect
# puts "---- parse tree follows ----"
    __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
    # do_parse
  end

  def next_token
    @q.shift
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    20,    21,    24,    24,    22,    24,    40,    13,    26,    18,
    24,    13,    50,    11,    20,    21,    44,     6,    22,    24,
    52,    20,    21,    18,    25,    13,    48,    11,    20,    21,
    36,     6,    22,    33,    31,    31,    47,    18,    34,    13,
    37,    11,    20,    21,    46,     6,    22,    49,    47,    47,
    25,    18,    26,    13,    13,    11,    20,    21,    29,     6,
    22,    23,    31,   nil,   nil,    18,   nil,    13,   nil,    11,
    20,    21,   nil,     6,    22,   nil,   nil,   nil,   nil,    18,
   nil,    13,   nil,    11,    20,    21,   nil,     6,    22,   nil,
   nil,   nil,   nil,    18,   nil,    13,   nil,    11,    20,    21,
   nil,     6,    22,   nil,   nil,   nil,   nil,    18,   nil,    13,
   nil,    11,   nil,   nil,   nil,     6 ]

racc_action_check = [
     0,     0,    45,    28,     0,     2,    23,     5,     4,     0,
    51,     0,    45,     0,    46,    46,    28,     0,    46,    32,
    51,    17,    17,    46,     3,    46,    32,    46,    29,    29,
    17,    46,    29,    14,    20,    21,    30,    29,    14,    29,
    18,    29,    26,    26,    29,    29,    26,    36,    38,    39,
    41,    26,    42,    26,    43,    26,    25,    25,    11,    26,
    25,     1,    12,   nil,   nil,    25,   nil,    25,   nil,    25,
    13,    13,   nil,    25,    13,   nil,   nil,   nil,   nil,    13,
   nil,    13,   nil,    13,     6,     6,   nil,    13,     6,   nil,
   nil,   nil,   nil,     6,   nil,     6,   nil,     6,    24,    24,
   nil,     6,    24,   nil,   nil,   nil,   nil,    24,   nil,    24,
   nil,    24,   nil,   nil,   nil,    24 ]

racc_action_pointer = [
    -2,    61,    -2,    16,    -1,    -6,    82,   nil,   nil,   nil,
   nil,    42,    58,    68,    28,   nil,   nil,    19,    28,   nil,
    30,    31,   nil,     6,    96,    54,    40,   nil,    -4,    26,
    32,   nil,    12,   nil,   nil,   nil,    35,   nil,    44,    45,
   nil,    42,    43,    41,   nil,    -5,    12,   nil,   nil,   nil,
   nil,     3,   nil ]

racc_action_default = [
   -36,   -36,    -1,    -3,    -5,    -7,   -36,   -10,   -11,   -12,
   -13,   -36,   -17,   -36,   -20,   -22,   -23,   -24,   -36,   -28,
   -29,   -31,   -35,   -36,   -36,   -36,   -36,    -9,   -36,   -36,
   -16,   -33,   -36,   -19,   -21,   -25,   -36,   -27,   -30,   -32,
    53,    -2,    -4,    -6,    -8,   -36,   -36,   -34,   -18,   -26,
   -14,   -36,   -15 ]

racc_goto_table = [
     2,    27,    30,    43,    42,    41,    28,     1,    35,   nil,
    38,    39,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    45,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,
   nil,   nil,   nil,   nil,   nil,   nil,    51 ]

racc_goto_check = [
     2,     6,    11,     5,     4,     3,     2,     1,    14,   nil,
    11,    11,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,
   nil,   nil,   nil,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     7,     0,   -19,   -21,   -23,    -4,   nil,   nil,   nil,
   nil,   -10,   nil,   nil,    -9,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     7,     8,     9,    10,
    12,   nil,    14,    15,    16,    17,    19 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 22, :_reduce_none,
  3, 23, :_reduce_2,
  1, 23, :_reduce_3,
  3, 24, :_reduce_4,
  1, 24, :_reduce_none,
  3, 25, :_reduce_6,
  1, 25, :_reduce_none,
  3, 26, :_reduce_8,
  2, 26, :_reduce_9,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  4, 30, :_reduce_14,
  5, 30, :_reduce_15,
  2, 27, :_reduce_16,
  1, 27, :_reduce_none,
  3, 31, :_reduce_18,
  2, 28, :_reduce_19,
  1, 28, :_reduce_none,
  2, 33, :_reduce_21,
  1, 33, :_reduce_none,
  1, 33, :_reduce_none,
  1, 33, :_reduce_none,
  2, 34, :_reduce_25,
  3, 36, :_reduce_26,
  2, 36, :_reduce_27,
  1, 35, :_reduce_none,
  1, 37, :_reduce_29,
  2, 37, :_reduce_30,
  1, 37, :_reduce_31,
  2, 37, :_reduce_32,
  1, 32, :_reduce_33,
  2, 32, :_reduce_34,
  1, 29, :_reduce_35 ]

racc_reduce_n = 36

racc_shift_n = 53

racc_token_table = {
  false => 0,
  :error => 1,
  :Command => 2,
  :LiteralCommand => 3,
  :Argument => 4,
  :Heredoc => 5,
  :InternalEval => 6,
  :Separator => 7,
  :Conditional => 8,
  :Pipe => 9,
  :Redirection => 10,
  :LValue => 11,
  :RValue => 12,
  :BeginCommandSubstitution => 13,
  :EndCommandSubstitution => 14,
  :Range => 15,
  :BlockBegin => 16,
  :BlockEnd => 17,
  :BlockParam => 18,
  "(" => 19,
  ")" => 20 }

racc_nt_base = 21

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "Command",
  "LiteralCommand",
  "Argument",
  "Heredoc",
  "InternalEval",
  "Separator",
  "Conditional",
  "Pipe",
  "Redirection",
  "LValue",
  "RValue",
  "BeginCommandSubstitution",
  "EndCommandSubstitution",
  "Range",
  "BlockBegin",
  "BlockEnd",
  "BlockParam",
  "\"(\"",
  "\")\"",
  "$start",
  "program",
  "stmts",
  "stmt",
  "pipeline",
  "stmts2",
  "stmt_w_substitutions",
  "command_w_heredoc",
  "internal_eval",
  "range_stmt",
  "stmt_w_substitutions2",
  "args",
  "command_w_redirects",
  "command_w_vars",
  "command",
  "vars",
  "command2" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'grammar.y', 23)
  def _reduce_2(val, _values, result)
     result = StatementsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 25)
  def _reduce_3(val, _values, result)
     result = StatementsNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 28)
  def _reduce_4(val, _values, result)
     result = ConditionalNode.new(val[1].value, val[0], val[2]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_6(val, _values, result)
     result = PipelineNode.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'grammar.y', 36)
  def _reduce_8(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 38)
  def _reduce_9(val, _values, result)
     result = ConcatenationNode.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_14(val, _values, result)
     result = RangeNode.new(val[0], BlockNode.new(val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_15(val, _values, result)
     result = RangeNode.new(val[0], BlockNode.new(val[3], params: [val[2].value]))
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_16(val, _values, result)
     result = val[0] ; val[0].tail = val[1] 
    result
  end
.,.,

# reduce 17 omitted

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_18(val, _values, result)
     result = CommandSubstitutionNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_19(val, _values, result)
     val[0].heredoc = val[1] ; result = val[0] 
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_21(val, _values, result)
     val[0].redirects << RedirectionNode.new(val[1].value, val[1].attrs[:target]) ; result = val[0] 
    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_25(val, _values, result)
     result = EnvWrapperNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_26(val, _values, result)
     val[0].add_var(val[1].value, val[2].value) ; result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 72)
  def _reduce_27(val, _values, result)
     result = EnvNode.new(val[0].value, val[1].value) 
    result
  end
.,.,

# reduce 28 omitted

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_29(val, _values, result)
     result = CommandNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_30(val, _values, result)
     result = CommandNode.new(val[0].value, val[1].flatten) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_31(val, _values, result)
     result = CommandNode.new(val[0].value, literal:true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_32(val, _values, result)
     result = CommandNode.new(val[0].value, val[1].flatten, literal:true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 86)
  def _reduce_33(val, _values, result)
     result = [ArgumentNode.new(val[0].value)] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_34(val, _values, result)
     result = [val[0], ArgumentNode.new(val[1].value)].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_35(val, _values, result)
     result = InternalEvalNode.new(val[0].value) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class ParserImpl
    end   # module Shell
  end   # module Yap


if $0 == __FILE__
  require 'pry'
  $LOAD_PATH.unshift File.dirname(__FILE__) + "/lib/"
  require 'yap/shell/parser/lexer'
  require 'yap/shell/parser/nodes'
    [
    # "echo `echo hi`",
    # "`git cbranch`",
    # "`git cbranch`.bak",
    # "echo `echo hi`",
    "(0..3) : echo hi",
    "(0..3) as n : echo hi",
    # "`hi``bye` `what`",
    # "echo && `what` && where is `that`thing | `you know`",
    ].each do |src|
      puts 'parsing:'
      print src
      puts
      puts 'result:'
      require 'pp'
      ast = Yap::Shell::ParserImpl.new.parse(src)
      pp ast
    end


  # puts "---- Evaluating"
  #   require 'pry'
  # binding.pry
  # Evaluator.new.evaltree(ast)
end
