#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Yap
  module Shell
    class ParserImpl < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 85)
  include Yap::Shell::Parser::Nodes
#=end
  def parse(str)
    @yydebug = true

    @q = Yap::Shell::Parser::Lexer.new.tokenize(str)
    # @q.push [false, '$']   # is optional from Racc 1.3.7
# puts @q.inspect
# puts "---- parse tree follows ----"
    __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
    # do_parse
  end

  def next_token
    @q.shift
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    17,    18,    33,    21,    19,    33,    17,    18,    31,    15,
    19,    10,    39,     6,    35,    15,    21,    10,    10,     6,
    17,    18,    23,    40,    19,    22,    17,    18,    21,    15,
    19,    10,    20,     6,    41,    15,    42,    10,    27,     6,
    17,    18,    42,    28,    19,    22,    17,    18,    23,    15,
    19,    10,    10,     6,   nil,    15,   nil,    10,   nil,     6,
    17,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    30 ]

racc_action_check = [
     0,     0,    18,    25,     0,    17,    10,    10,    15,     0,
    10,     0,    25,     0,    20,    10,    26,    10,     5,    10,
     6,     6,     4,    26,     6,     3,    23,    23,     2,     6,
    23,     6,     1,     6,    30,    23,    32,    23,    11,    23,
    22,    22,    34,    11,    22,    36,    21,    21,    37,    22,
    21,    22,    38,    22,   nil,    21,   nil,    21,   nil,    21,
    14,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14 ]

racc_action_pointer = [
    -2,    32,    21,    17,    13,     5,    18,   nil,   nil,   nil,
     4,    33,   nil,   nil,    58,    -4,   nil,     1,    -2,   nil,
    14,    44,    38,    24,   nil,    -4,     9,   nil,   nil,   nil,
    22,   nil,    32,   nil,    38,   nil,    37,    39,    39,   nil,
   nil,   nil,   nil ]

racc_action_default = [
   -31,   -31,    -1,    -3,    -5,    -7,   -31,    -9,   -11,   -12,
   -31,   -15,   -17,   -18,   -19,   -31,   -23,   -24,   -26,   -30,
   -31,   -31,   -31,   -31,   -10,   -31,   -31,   -14,   -16,   -20,
   -31,   -22,   -25,   -28,   -27,    43,    -2,    -4,    -6,    -8,
   -13,   -21,   -29 ]

racc_goto_table = [
    24,     2,    32,    34,    38,    37,    36,    25,    29,     1,
   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    24 ]

racc_goto_check = [
     6,     2,    14,    14,     5,     4,     3,     2,    11,     1,
   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     6 ]

racc_goto_pointer = [
   nil,     9,     1,   -15,   -17,   -19,    -5,   nil,   nil,   nil,
   nil,    -6,   nil,   nil,   -15 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     7,     8,     9,    11,
    12,    13,    14,    16,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 18, :_reduce_none,
  3, 19, :_reduce_2,
  1, 19, :_reduce_3,
  3, 20, :_reduce_4,
  1, 20, :_reduce_none,
  3, 21, :_reduce_6,
  1, 21, :_reduce_none,
  3, 22, :_reduce_8,
  1, 22, :_reduce_none,
  2, 22, :_reduce_none,
  1, 22, :_reduce_none,
  1, 22, :_reduce_none,
  3, 23, :_reduce_13,
  2, 24, :_reduce_14,
  1, 24, :_reduce_none,
  2, 26, :_reduce_16,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  2, 27, :_reduce_20,
  3, 29, :_reduce_21,
  2, 29, :_reduce_22,
  1, 28, :_reduce_none,
  1, 30, :_reduce_24,
  2, 30, :_reduce_25,
  1, 30, :_reduce_26,
  2, 30, :_reduce_27,
  1, 31, :_reduce_28,
  2, 31, :_reduce_29,
  1, 25, :_reduce_30 ]

racc_reduce_n = 31

racc_shift_n = 43

racc_token_table = {
  false => 0,
  :error => 1,
  :Command => 2,
  :LiteralCommand => 3,
  :Argument => 4,
  :Heredoc => 5,
  :InternalEval => 6,
  :Separator => 7,
  :Conditional => 8,
  :Pipe => 9,
  :Redirection => 10,
  :LValue => 11,
  :RValue => 12,
  :BeginCommandSubstitution => 13,
  :EndCommandSubstitution => 14,
  "(" => 15,
  ")" => 16 }

racc_nt_base = 17

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "Command",
  "LiteralCommand",
  "Argument",
  "Heredoc",
  "InternalEval",
  "Separator",
  "Conditional",
  "Pipe",
  "Redirection",
  "LValue",
  "RValue",
  "BeginCommandSubstitution",
  "EndCommandSubstitution",
  "\"(\"",
  "\")\"",
  "$start",
  "program",
  "stmts",
  "stmt",
  "pipeline",
  "stmts2",
  "command_substitution",
  "command_w_heredoc",
  "internal_eval",
  "command_w_redirects",
  "command_w_vars",
  "command",
  "vars",
  "command2",
  "args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'grammar.y', 23)
  def _reduce_2(val, _values, result)
     result = StatementsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 25)
  def _reduce_3(val, _values, result)
     result = StatementsNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 28)
  def _reduce_4(val, _values, result)
     result = ConditionalNode.new(val[1].value, val[0], val[2]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_6(val, _values, result)
     result = PipelineNode.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'grammar.y', 36)
  def _reduce_8(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'grammar.y', 43)
  def _reduce_13(val, _values, result)
     result = CommandSubstitutionNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_14(val, _values, result)
     val[0].heredoc = val[1] ; result = val[0] 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_16(val, _values, result)
     val[0].redirects << RedirectionNode.new(val[1].value, val[1].attrs[:target]) ; result = val[0] 
    result
  end
.,.,

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_20(val, _values, result)
     result = EnvWrapperNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_21(val, _values, result)
     val[0].add_var(val[1].value, val[2].value) ; result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_22(val, _values, result)
     result = EnvNode.new(val[0].value, val[1].value) 
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_24(val, _values, result)
     result = CommandNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_25(val, _values, result)
     result = CommandNode.new(val[0].value, val[1].flatten) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_26(val, _values, result)
     result = CommandNode.new(val[0].value, literal:true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 72)
  def _reduce_27(val, _values, result)
     result = CommandNode.new(val[0].value, val[1].flatten, literal:true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 75)
  def _reduce_28(val, _values, result)
     result = [val[0].value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_29(val, _values, result)
     result = [val[0], val[1].value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_30(val, _values, result)
     result = InternalEvalNode.new(val[0].value) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class ParserImpl
    end   # module Shell
  end   # module Yap


if $0 == __FILE__
  $LOAD_PATH.unshift File.dirname(__FILE__) + "/lib/"
  require 'yap/shell/parser/lexer'
  require 'yap/shell/parser/nodes'
    [
    "(foo a b && (bar c d | baz e f))"
    ].each do |src|
      puts 'parsing:'
      print src
      puts
      puts 'result:'
      require 'pp'
      ast = Yap::Shell::Parser.new.parse(src)
      pp ast
    end


  # puts "---- Evaluating"
  #   require 'pry'
  # binding.pry
  # Evaluator.new.evaltree(ast)
end
