#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

if $0 ==__FILE__
  $LOAD_PATH.unshift File.dirname(__FILE__) + "/../../"
  module Yap
    module Shell
      module Parser
      end
    end
  end
  require 'yap/shell/parser/nodes'
end

module Yap
  module Shell
    class ParserImpl < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 107)
  include Yap::Shell::Parser::Nodes

#=end
  def parse(str)
    @yydebug = true

    @q = Yap::Shell::Parser::Lexer.new.tokenize(str)
    # @q.push [false, '$']   # is optional from Racc 1.3.7
# puts @q.inspect
# puts "---- parse tree follows ----"
    __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
    # do_parse
  end

  def next_token
    @q.shift
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    20,    21,    34,    24,    22,    24,    41,    35,    32,    18,
    32,    13,    48,     4,    46,     8,    20,    21,    38,    32,
    22,    20,    21,    24,    13,    18,    28,    13,    20,    21,
    37,     8,    22,    27,    24,    47,    23,    18,    49,    13,
    20,    21,    47,     8,    22,    47,    27,    24,    28,    18,
    13,    13,    20,    21,    26,     8,    22,   nil,   nil,   nil,
   nil,    18,   nil,    13,    20,    21,   nil,     8,    22,   nil,
   nil,   nil,   nil,    18,   nil,    13,    20,    21,   nil,     8,
    22,   nil,   nil,   nil,   nil,    18,   nil,    13,    20,    21,
   nil,     8,    22,   nil,   nil,   nil,   nil,    18,   nil,    13,
   nil,   nil,   nil,     8 ]

racc_action_check = [
     0,     0,    14,    30,     0,    33,    23,    14,    20,     0,
    21,     0,    33,     0,    30,     0,    13,    13,    18,    12,
    13,    17,    17,    25,     7,    13,     6,    13,    24,    24,
    17,    13,    24,     5,     2,    31,     1,    24,    37,    24,
     4,     4,    39,    24,     4,    40,    42,    43,    44,     4,
    45,     4,    28,    28,     4,     4,    28,   nil,   nil,   nil,
   nil,    28,   nil,    28,    27,    27,   nil,    28,    27,   nil,
   nil,   nil,   nil,    27,   nil,    27,     8,     8,   nil,    27,
     8,   nil,   nil,   nil,   nil,     8,   nil,     8,    26,    26,
   nil,     8,    26,   nil,   nil,   nil,   nil,    26,   nil,    26,
   nil,   nil,   nil,    26 ]

racc_action_pointer = [
    -2,    36,    27,   nil,    38,    25,    17,    11,    74,   nil,
   nil,   nil,    15,    14,    -3,   nil,   nil,    19,     6,   nil,
     4,     6,   nil,     6,    26,    16,    86,    62,    50,   nil,
    -4,    31,   nil,    -2,   nil,   nil,   nil,    26,   nil,    38,
    41,   nil,    38,    40,    39,    37,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -36,   -36,    -1,    -2,   -36,    -6,    -8,   -10,   -36,   -13,
   -14,   -15,   -17,   -36,   -20,   -22,   -23,   -24,   -36,   -28,
   -29,   -31,   -35,   -36,   -36,    -3,   -36,   -36,   -36,   -12,
   -36,   -16,   -33,   -36,   -19,   -21,   -25,   -36,   -27,   -30,
   -32,    50,    -5,    -4,    -7,    -9,   -11,   -34,   -18,   -26 ]

racc_goto_table = [
    29,     2,    31,    44,    42,    25,    45,     3,     1,    30,
    39,    40,    36,   nil,    33,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29 ]

racc_goto_check = [
     7,     2,    11,     5,     4,     2,     6,     3,     1,     2,
    11,    11,    14,   nil,     2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     7 ]

racc_goto_pointer = [
   nil,     8,     1,     7,   -20,   -24,   -22,    -7,   nil,   nil,
   nil,   -10,   nil,   nil,    -5,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,     6,     7,     9,    10,    11,
    12,   nil,    14,    15,    16,    17,    19 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 20, :_reduce_none,
  1, 20, :_reduce_none,
  2, 22, :_reduce_3,
  3, 22, :_reduce_4,
  3, 21, :_reduce_5,
  1, 21, :_reduce_6,
  3, 23, :_reduce_7,
  1, 23, :_reduce_none,
  3, 24, :_reduce_9,
  1, 24, :_reduce_none,
  3, 25, :_reduce_11,
  2, 25, :_reduce_12,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  2, 26, :_reduce_16,
  1, 26, :_reduce_none,
  3, 29, :_reduce_18,
  2, 27, :_reduce_19,
  1, 27, :_reduce_none,
  2, 31, :_reduce_21,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  1, 31, :_reduce_none,
  2, 32, :_reduce_25,
  3, 34, :_reduce_26,
  2, 34, :_reduce_27,
  1, 33, :_reduce_none,
  1, 35, :_reduce_29,
  2, 35, :_reduce_30,
  1, 35, :_reduce_31,
  2, 35, :_reduce_32,
  1, 30, :_reduce_33,
  2, 30, :_reduce_34,
  1, 28, :_reduce_35 ]

racc_reduce_n = 36

racc_shift_n = 50

racc_token_table = {
  false => 0,
  :error => 1,
  :Command => 2,
  :LiteralCommand => 3,
  :Argument => 4,
  :Heredoc => 5,
  :InternalEval => 6,
  :Separator => 7,
  :Conditional => 8,
  :Pipe => 9,
  :Redirection => 10,
  :LValue => 11,
  :RValue => 12,
  :BeginCommandSubstitution => 13,
  :EndCommandSubstitution => 14,
  :NumericalRange => 15,
  :CounterVariable => 16,
  "(" => 17,
  ")" => 18 }

racc_nt_base = 19

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "Command",
  "LiteralCommand",
  "Argument",
  "Heredoc",
  "InternalEval",
  "Separator",
  "Conditional",
  "Pipe",
  "Redirection",
  "LValue",
  "RValue",
  "BeginCommandSubstitution",
  "EndCommandSubstitution",
  "NumericalRange",
  "CounterVariable",
  "\"(\"",
  "\")\"",
  "$start",
  "program",
  "stmts",
  "repetition_stmt",
  "stmt",
  "pipeline",
  "stmts2",
  "stmt_w_substitutions",
  "command_w_heredoc",
  "internal_eval",
  "stmt_w_substitutions2",
  "args",
  "command_w_redirects",
  "command_w_vars",
  "command",
  "vars",
  "command2" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.y', 24)
  def _reduce_3(val, _values, result)
     result = NumericalRangeNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 26)
  def _reduce_4(val, _values, result)
     result = NumericalRangeNode.new(val[0], val[2], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 29)
  def _reduce_5(val, _values, result)
     result = StatementsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 31)
  def _reduce_6(val, _values, result)
     result = StatementsNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 34)
  def _reduce_7(val, _values, result)
     result = ConditionalNode.new(val[1].value, val[0], val[2]) 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'grammar.y', 38)
  def _reduce_9(val, _values, result)
     result = PipelineNode.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'grammar.y', 42)
  def _reduce_11(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 44)
  def _reduce_12(val, _values, result)
     result = ConcatenationNode.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_16(val, _values, result)
     result = val[0] ; val[0].tail = val[1] 
    result
  end
.,.,

# reduce 17 omitted

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_18(val, _values, result)
     result = CommandSubstitutionNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_19(val, _values, result)
     val[0].heredoc = val[1] ; result = val[0] 
    result
  end
.,.,

# reduce 20 omitted

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_21(val, _values, result)
     val[0].redirects << RedirectionNode.new(val[1].value, val[1].attrs[:target]) ; result = val[0] 
    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_25(val, _values, result)
     result = EnvWrapperNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_26(val, _values, result)
     val[0].add_var(val[1].value, val[2].value) ; result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 72)
  def _reduce_27(val, _values, result)
     result = EnvNode.new(val[0].value, val[1].value) 
    result
  end
.,.,

# reduce 28 omitted

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_29(val, _values, result)
     result = CommandNode.new(val[0].value) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_30(val, _values, result)
     result = CommandNode.new(val[0].value, val[1].flatten) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_31(val, _values, result)
     result = CommandNode.new(val[0].value, literal:true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_32(val, _values, result)
     result = CommandNode.new(val[0].value, val[1].flatten, literal:true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 86)
  def _reduce_33(val, _values, result)
     result = [ArgumentNode.new(val[0].value)] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_34(val, _values, result)
     result = [val[0], ArgumentNode.new(val[1].value)].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_35(val, _values, result)
     result = InternalEvalNode.new(val[0].value) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class ParserImpl
    end   # module Shell
  end   # module Yap


if $0 == __FILE__
  $LOAD_PATH.unshift File.dirname(__FILE__) + "/lib/"
  require 'yap/shell/parser/lexer'
  require 'yap/shell/parser/nodes'
    [
    # "echo `echo hi`",
    # "`git cbranch`",
    # "`git cbranch`.bak",
    # "echo `echo hi`",
    "0..3 as n: echo hi",
    # "`hi``bye` `what`",
    # "echo && `what` && where is `that`thing | `you know`",
    ].each do |src|
      puts 'parsing:'
      print src
      puts
      puts 'result:'
      require 'pp'
      ast = Yap::Shell::ParserImpl.new.parse(src)
      pp ast
    end


  # puts "---- Evaluating"
  #   require 'pry'
  # binding.pry
  # Evaluator.new.evaltree(ast)
end
